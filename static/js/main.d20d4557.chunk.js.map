{"version":3,"sources":["logo.svg","todo/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoComponent","props","textAreaRef","React","createRef","useState","newTodo","setNewTodo","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTodo","unshift","content","assign","id","console","log","ref","required","name","type","TodoList","todoInit","setTodoInit","todo","setTodo","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","status","response","onerror","e","send","loadTodo","alert","map","item","index","Todo","key","ActionBtn","action","setAssign","userAssign","setUserAssign","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","todoEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d20d4557.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\n\nimport {loadTodo} from '../lookup'\n\nexport function TodoComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTodo, setNewTodo] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTodo = [...newTodo]\n        tempNewTodo.unshift({\n            content: newVal,\n            assign: 0,\n            id: 12314\n        })\n        setNewTodo(tempNewTodo)\n        console.log(newVal)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n            <div className='col-12 mb-3'>\n                <form onSubmit={handleSubmit}>\n                    <textarea ref={textAreaRef} required={true} className='form-control' name='todo'>\n\n                    </textarea>\n                    <button type='submit' className='btn btn-primary my-3'>Todo</button>\n                </form>\n            </div>\n            <TodoList newTodo={newTodo} />\n        </div>\n}\n\nexport function TodoList(props) {\n    const [todoInit, setTodoInit] = useState([])\n    const [todo, setTodo] = useState([])\n    useEffect(() => {\n        const final = [...props.newTodo].concat(todoInit)\n        if (final.length !== todo.length) {\n            setTodo(final)\n        }\n    }, [props.newTodo, todo, todoInit])\n\n    useEffect(() => {\n        const myCallback = (status,response) => {\n        console.log(status,response)\n        if (status === 200){\n            setTodoInit(response)\n        } else {\n            alert(\"Err\")\n        }\n        }\n    loadTodo(myCallback)\n    }, [todoInit])\n    return todo.map((item, index) => {\n        return <Todo todo={item} className='my-5 py-5 bg-white text-dark' key={`${index}-{todo.id}`}/>\n    })\n\n    }\n\nexport function ActionBtn(props) {\n    const {todo, action} = props\n    const [assign, setAssign] = useState(todo.assign ? todo.assign : 0)\n    const [userAssign, setUserAssign] = useState(todo.userAssign === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'assign') {\n            if (userAssign === true) {\n                setAssign(assign - 1)\n                setUserAssign(false)\n            } else {\n            setAssign(assign + 1)\n            setUserAssign(true)\n            }\n        }\n    }\n    const display = action.type === 'assign' ? `${assign} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n    }\n\nexport function Todo(props) {\n    const {todo} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{todo.id}-{todo.content}</p>\n        <div className='btn btn-group'>\n        <ActionBtn todo={todo} action={{type:\"assign\", display:\"Assign\"}}/>\n        <ActionBtn todo={todo} action={{type:\"unassign\", display:\"Unassign\"}}/>\n        <ActionBtn todo={todo} action={{type:\"retodo\", display:\"Retodo\"}}/>\n\n\n        </div>\n    </div>\n    }","export function loadTodo(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' //\"POST\"\n    const url = \"http://localhost:8000/api/todo/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n        callback(xhr.status, xhr.response)\n    }\n    xhr.onerror = function(e) {\n        console.log(e)\n    callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n    }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TodoComponent} from './todo'\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TodoComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TodoComponent} from './todo'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl)  {\n  ReactDOM.render(<App />, appEl);\n\n}\nconst todoEl = document.getElementById(\"todo\")\nif (todoEl) {\n  ReactDOM.render(<TodoComponent />, todoEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}